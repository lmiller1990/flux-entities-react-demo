{"version":3,"sources":["Users.tsx","UsersContainer.ts","actions.ts","App.tsx","reducers.ts","index.tsx","store.ts"],"names":["Users","react_default","a","createElement","Fragment","onClick","this","props","fetchUsers","clearUsers","touched","loading","loaded","users","map","user","key","id","name","React","PureComponent","UsersContainer","connect","state","console","log","mapEntities","isLoading","isLoaded","dispatch","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","type","Promise","res","setTimeout","sent","payload","t0","stop","_x","apply","arguments","App","initialState","ids","all","errors","usersReducer","length","undefined","action","objectSpread","reduce","acc","curr","Array","from","Set","concat","toConsumableArray","defineProperty","store","createStore","combineReducers","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e5db2953.chunk.js","sourcesContent":["import React from 'react'\n\nimport { IUser } from './types'\n\nexport interface IStateProps {\n  users: IUser[]\n  touched: boolean\n  loading: boolean\n  loaded: boolean\n}\n\nexport interface IDispatchProps {\n  fetchUsers: () => Promise<void>\n  clearUsers: () => void\n}\n\ntype TProps = IStateProps & IDispatchProps\n\nclass Users extends React.PureComponent<TProps> {\n  public render(): JSX.Element {\n    return (\n      <React.Fragment>\n        <button onClick={this.props.fetchUsers}>Fetch User</button>\n        <button onClick={this.props.clearUsers}>Clear State</button>\n        <div>\n          <div>Pristine: {this.props.touched ? 'false' : 'true'}</div>\n          <div>Loading: {this.props.loading ? 'true' : 'false'}</div>\n          <div>Loaded: {this.props.loaded ? 'true': 'false'}</div>\n          <ul>\n            {\n              this.props.users.map(user => <li key={user.id}>ID: {user.id}. Name: {user.name}</li>)\n            }\n          </ul>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport {\n  Users\n}","import { AnyAction } from 'redux';\nimport { connect } from 'react-redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { mapEntities, isLoading, isLoaded } from 'flux-entities'\n\nimport { Users, IStateProps, IDispatchProps } from './Users'\nimport { IState } from './store'\nimport { fetchUsers, clearUsers } from './actions'\n\nconst mapStateToProps = (state: IState): IStateProps => {\n  console.log(state.users)\n  return {\n    users: mapEntities(state.users),\n    touched: state.users.touched,\n    loading: isLoading(state.users),\n    loaded: isLoaded(state.users),\n  }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, AnyAction>): IDispatchProps => {\n  return {\n    fetchUsers: () => dispatch(fetchUsers()),\n    clearUsers: () => dispatch(clearUsers())\n  }\n}\n\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)\n\nexport {\n  UsersContainer\n}\n","import { AnyAction } from 'redux'\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk'\n\nimport { IUser } from './types'\n\ninterface IFetchUsersSuccess {\n  type: 'FETCH_USERS_SUCCESS',\n  payload: IUser[]\n}\n\ninterface IClearUsersState {\n  type: 'CLEAR_USERS_STATE',\n}\n\ninterface IFetchUsersRequest {\n  type: 'FETCH_USERS_REQUEST',\n}\n\nconst fetchUsersSuccess = (users: IUser[]) => ({\n  type: 'FETCH_USERS_SUCCESS',\n  payload: users\n})\n\nconst fetchUsersRequest = () => ({\n  type: 'FETCH_USERS_REQUEST',\n})\n\nconst clearUsers = () => ({\n  type: 'CLEAR_USERS_STATE',\n})\n\nconst fakeApiCall = (): Promise<IUser[]> => {\n  return new Promise<IUser[]>(res => {\n    setTimeout(() => {\n      res(\n        [\n          { id: 1, name: 'Alice' },\n          { id: 2, name: 'Bob' },\n          { id: 3, name: 'Catherine' },\n        ]\n      )\n    }, 1000)\n  })\n}\n\nconst fetchUsers = (): ThunkAction<Promise<void>, {}, {}, AnyAction> => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>): Promise<void> => {\n    dispatch(fetchUsersRequest())\n    try {\n        const response = await fakeApiCall()\n        dispatch(fetchUsersSuccess(response))\n    } catch (e) {\n      // handle error \n      // state.errors = ['some error message']\n    }\n  }\n}\n\n\nexport type TUserAction = IFetchUsersRequest | IFetchUsersSuccess | IClearUsersState\n\nexport {\n  fetchUsersRequest,\n  fetchUsersSuccess,\n  clearUsers,\n  fetchUsers\n}\n","import React from 'react'\n\nimport { UsersContainer } from './UsersContainer'\n\n\nconst App: React.FC = () => {\n  return (\n    <UsersContainer />\n  );\n}\n\nexport default App;\n","import { IAjaxState } from 'flux-entities'\n\nimport { IUser } from './types'\nimport { TUserAction } from './actions'\n\nexport interface IUsersState extends IAjaxState<IUser> {}\n\nconst initialState: IUsersState = {\n  ids: [],\n  all: {},\n  loading: false,\n  touched: false,\n  errors: []\n}\n\nconst usersReducer = (state: IUsersState = initialState, action: TUserAction): IUsersState => {\n  if (action.type === 'CLEAR_USERS_STATE') {\n    return { ...initialState }\n  }\n\n  if (action.type === 'FETCH_USERS_REQUEST') {\n    return {\n      ...state,\n      touched: true,\n      loading: true\n    }\n  }\n\n  if (action.type === 'FETCH_USERS_SUCCESS') {\n    return action.payload.reduce<IUsersState>((acc, curr) => {\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        ids: Array.from(new Set([...acc.ids, curr.id])),\n        all: { ...acc.all, [curr.id]: curr }\n      }\n    }, { ...state })\n  }\n\n  return state\n}\n\nexport {\n  usersReducer\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport { initializeStore } from './store'\n\nconst store = initializeStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n","import { createStore, combineReducers, applyMiddleware, AnyAction } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n\nimport { usersReducer, IUsersState } from './reducers'\n\nexport interface IState {\n  users: IUsersState\n}\n\nconst initializeStore = () =>\n  createStore<IState, AnyAction, {}, {}>(\n    combineReducers({\n      users: usersReducer,\n    }),\n    applyMiddleware(thunkMiddleware)\n  )\n\nexport { initializeStore }"],"sourceRoot":""}